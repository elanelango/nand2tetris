// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
        DRegister(in=inD, load=loadD, out=outD);
        PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

        // A or M as y to the ALU?
        Mux16(a=outA, b=inM, sel=instruction[12], out=aOrM);

        ALU(x=outD, y=aOrM, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=outALU, out=inD, out=outM, zr=zeroALU, zr=j2eq, ng=negALU, ng=j4lt);

        // Input A with @value from A-instruction or with ALU out for
        // C-instruction
        Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);

        // Load A if it's an A-instruction or a C-instruction with destination
        // set to A
        Not(in=instruction[15], out=aIns);
        And(a=instruction[15], b=instruction[5], out=destA);
        Or(a=aIns, b=destA, out=loadA);

        // Load D if it's a C-instruction with destination set to D.
        And(a=instruction[15], b=instruction[4], out=loadD);

        // Write to M if it's a C-instruction with destination set to M.
        And(a=instruction[15], b=instruction[3], out=writeM);

        // Different conditions on the out of ALU to decide to jump or not
        Not(in=zeroALU, out=notZeroALU, out=j5ne);
        Not(in=negALU, out=notNegALU);
        And(a=notZeroALU, b=notNegALU, out=posALU, out=j1gt);
        Or(a=posALU, b=zeroALU, out=j3ge);
        Or(a=negALU, b=zeroALU, out=j6le);

        // Check if the jump condition specified in the instruction is true.
        Mux(a=false, b=j1gt, sel=instruction[0], out=j01);
        Mux(a=j2eq, b=j3ge, sel=instruction[0], out=j23);
        Mux(a=j4lt, b=j5ne, sel=instruction[0], out=j45);
        Mux(a=j6le, b=true, sel=instruction[0], out=j67);
        Mux(a=j01, b=j23, sel=instruction[1], out=j0123);
        Mux(a=j45, b=j67, sel=instruction[1], out=j4567);
        Mux(a=j0123, b=j4567, sel=instruction[2], out=jmp);

        // If C-instruction and if jump condition is satisfied then load PC
        // with new address.
        And(a=instruction[15], b=jmp, out=loadPC);
}